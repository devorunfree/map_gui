{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","latitude","longitude","width","height","zoom","_useState2","Object","slicedToArray","viewport","setViewport","_useState3","_useState4","selectedPoint","setselectedPoint","react_default","a","createElement","style","display","paddingLeft","windows","title","isMaximized","background","esm","assign","mapboxApiAccessToken","mapStyle","onViewportChange","pointData","map","datapoint","key","properties","POINT_ID","geometry","coordinates","class","onClick","e","preventDefault","src","alt","onClose","name","DOWNLOAD","UPLOAD","PING","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e804b149.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactMapGL, { Marker, Popup } from \"react-map-gl\";\nimport { TitleBar } from 'react-desktop/windows';\nimport * as pointData from \"./data/sample_data.json\";\n\nexport default function App() {\n  const [viewport, setViewport] = useState({\n    latitude: 28.064570,\n    longitude: -80.623040,\n    width: \"100vw\",\n    height: \"100vh\",\n    zoom: 16\n  });\n  const [selectedPoint, setselectedPoint] = useState(null);\n  \n  return (\n    <div>\n      <div style={{\n      display: \"block\", width:1500, paddingLeft:0\n      }}>\n      <h4>TESTING OVERLAY</h4>\n      <TitleBar\n      title= \"Testing Overlay\"\n      isMaximized=\"false\"\n      background=\"orange\"\n    />\n    </div>\n      <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken={\"pk.eyJ1IjoiZHJlc2VuZGVzIiwiYSI6ImNsOXJodWx0MzAxczIzdW15OG52NW9obmUifQ.f6-lyIEGufInJk1AJzvW1Qx\"}\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        onViewportChange={viewport=> {\n          setViewport(viewport)}}\n      >\n\n        {pointData.features.map(datapoint => (\n          <Marker \n            key={datapoint.properties.POINT_ID}\n            latitude ={datapoint.geometry.coordinates[0]}\n            longitude ={datapoint.geometry.coordinates[1]}\n          >\n            <button class = \"marker-btn\" onClick={(e) =>{\n              e.preventDefault();\n              setselectedPoint(datapoint);\n            }}>\n              <img src=\"/upload.svg\" alt = \"Upload Icon\"/>\n            </button>\n          </Marker>\n        ))}\n        {selectedPoint ? (\n          <Popup \n            latitude={selectedPoint.geometry.coordinates[0]} \n            longitude={selectedPoint.geometry.coordinates[1]}\n            onClose={() => {\n              setselectedPoint(null);\n\n            }}\n          >\n            <div>\n              <h2>{selectedPoint.properties.name}</h2>\n              <p>{\"DOWNLOAD: \"}{selectedPoint.properties.DOWNLOAD}</p>\n              <p>{\"UPLOAD: \"}{selectedPoint.properties.UPLOAD}</p>\n              <p>{\"PING: \"}{selectedPoint.properties.PING}</p>\n\n            </div>\n          </Popup>\n\n        ): null}\n      </ReactMapGL>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}